PROMISE LIBRARIES:
* bluebird          -	Full featured Promises/A+ implementation with exceptionally good performance	---   1.1 version
* es3-promise       -	An implementation of Promise then with ES3 syntax                             --- 	1.1
* Lie	              - Small library following the ES6 syntax	                                      ---   1.1
* Lifelong.Promise	- Lifelong implements the spec in a single, very strongly typed Typescript file, without extraneous identifiers.	--- 1.1
* Q                 -	A tool for making and composing asynchronous promises in JavaScript           --- 	1.0
* Promix	          - Mix promises with callbacks for improved control flow                         --- 	1.0

---------------------------------
using rsvp.promuse
---------------------------------
function dieToss() {
  return Math.floor(Math.random() * 6) + 1;
}

console.log('1');
var promise = new RSVP.Promise(function(fulfill, reject) {
  var n = dieToss();
  if (n === 6) {
    fulfill(n);
  } else {
    reject(n);
  }
  console.log('2');
});

promise.then(function(toss) {
  console.log('Yay, threw a ' + toss + '.');  
}, function(toss) {
  console.log('Oh, noes, threw a ' + toss + '.');  
});
console.log('3');

------------------------------------------------
Bluebird:

var Promise = require('bluebird');

var mongoClient = Promise.promisifyAll(require('mongodb')).MongoClient;

var url = 'mongodb://localhost/EmployeeDB';
mongoClient.connectAsync('mongodb://localhost/EmployeeDB')

.then(function(db) {
        return db.collection('Employee').findAsync({})

    })
    .then(function(cursor) {
        cursor.each(function(err, doc) {
            console.log(doc);
        })
    }); 

-------------------------------------------------------------------
