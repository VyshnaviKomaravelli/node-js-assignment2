PROMISE:

A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.

A Promise is in one of these states:

pending: initial state, neither fulfilled nor rejected.
fulfilled: meaning that the operation completed successfully.onFulfilled() will be called (e.g., resolve() was called)
rejected: meaning that the operation failed. onRejected() will be called (e.g., reject() was called)

Eg:
let promise = new Promise(function(resolve, reject) {
  resolve("done");

  reject(new Error("â€¦"));
});

Below code has .then(result) when it executes resolve and executes catch(error) when it executes reject. 


promise.then((result) => {
  console.log('Got data!', result);
}).catch((error) => {
  console.log('Error occurred!', error);
});

ADVANTAGES of promises:

*Better definition of control flow of asynchronous logic
*Reduced coupling
*Better error handling
*Improved readability
